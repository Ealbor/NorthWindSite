#pragma checksum "C:\Users\emalb\Desktop\.net core final project\.Net-core-Final-Project\NorthwindBase\NorthwindBaseProject\Views\Reports\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "200974739ae3b5f18e8517c391be6f4fd868fe4d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(Northwind.Views.Home.Reports.Views_Reports_Index), @"mvc.1.0.view", @"/Views/Reports/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Reports/Index.cshtml", typeof(Northwind.Views.Home.Reports.Views_Reports_Index))]
namespace Northwind.Views.Home.Reports
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"200974739ae3b5f18e8517c391be6f4fd868fe4d", @"/Views/Reports/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fc336443358a39bf31ac02f3d17194e98e1e1151", @"/Views/_ViewImports.cshtml")]
    public class Views_Reports_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 638, true);
            WriteLiteral(@"<!--Header for View-->
<div class=""jumobtron"">
    <h1 class=""my-4 text-center"">
        <b>Global Customers</b>
    </h1>


    <!--Chart Space-->
    <div class=""container my-3"">
        <div class=""row"">
            <div id=""toHide""class=""col-4"">

            <!--The script completes this ending table tag-->  
            </table>
            </div>

            <div class=""col-8"">
                <canvas id=""myChart"" width=""100"" height=""80""></canvas>
            </div>
        </div>
    </div>
</div>




    <!--Script section tag here allows us to use a script and not have the _Layout conflict -->
");
            EndContext();
            DefineSection("scripts", async() => {
                BeginContext(669, 8100, true);
                WriteLiteral(@"
        <script>

            //Variables for DATA manipulation
            var countryNames = [];                  //Array to hold JSON Country Names
            var customerNumbers = [];               //Array to hold JSON Customer Count
            var randomColors = [];                  //array to hold randomColors in RGBA format
            function randomBarColor() {             //RandomColor generator
                var o = Math.round;
                var r = Math.random;
                var s = 255;
                return 'rgba(' + o(r() * s) + ', '
                    + o(r() * s) + ', '
                    + o(r() * s) + ', '
                    + 0.8 + ')';
            }
            
                
            


            //This code establishes the view upon load.
            $(function () {                                                         //This will be called asap
                getData();                                                              //gets ca");
                WriteLiteral(@"lled
                function getData() {                                                    //definition of that called
                    $.getJSON({
                        //async: false,
                        url: ""../../reports/globalCustomers"",                           //Route specified in Reports Controller
                        success: function (response, textStatus, jqXhr) {

                            $(""#toHide"").append(""<table class=\""table  table-sm\""><thead><tr><th scope=\""col\"">Key</th><th scope=\""col\"">Country</th><th scope=\""col\"">Count</th></tr></thead><tbody id=\""tableBody\""></tbody>"");


                            for (var i = 0; i < response.length; i++) {                 //Looping through JSON response to populate arrays
                                countryNames.push(response[i].country);
                                customerNumbers.push(response[i].numCompanies);
                                randomColors.push(randomBarColor());

                        ");
                WriteLiteral(@"        //This code will populate the chart
                                $(""table"").append(""<tr><th scope = \""row\""> <button type=\""button\"" id=\"""" + [i] + ""\""  class=\""btn\"" style=\""background-color:"" + randomColors[i] + "" !important\"" ></button></th ><td>"" + response[i].country + ""</td><td>"" + response[i].numCompanies + ""</td></tr >"");
                            }

                            console.log(countryNames[0]);

                            //Hides the table then fades it in
                            $(""#toHide"").hide().fadeIn(4000);

                            
                            var ctx = $('#myChart');                                    //Grab HTML Canvas element
                            var myChart = new Chart(ctx, {                              //Instantiate Chart object
                                type: ""bar"",                                            //Specify the type of chart ('line', 'bar', 'radar', 'doughnut', 'pie', 'polar area', 'bubble, 'scatter')");
                WriteLiteral(@"
                                data: {
                                    labels: countryNames,                               //X-axis for the bar graph, accepts String[]
                                    datasets: [{
                                        label: ""Number of Customers by Country"",        //Title of Legend
                                        data: customerNumbers,                          //Y-Axis Data, accepts Int[]
                                        backgroundColor: randomColors,                  //Color of the ""bars"", accepts [] of RGBA
                                        borderColor: randomColors,                      //Color of the ""bar"" borders, accepts [] of RGBA
                                        borderWidth: 3                                  //Accepts int
                                    }]
                                },
                                options: {
                                    scales: {
                                  ");
                WriteLiteral(@"      xAxes:
                                            [{
                                                barPercentage: .5,                          //Percentage of width on edge of bar
                                                categoryPercentage: 0.5                     //Percentage of width in the middle of bar
                                            }],
                                        yAxes:
                                            [{
                                                ticks: {
                                                    beginAtZero: true
                                                }
                                            }]
                                    },
                                    animation: {
                                        duration: 4000,                                 //Milliseconds to determine animation speed
                                        easing: 'linear'                           //Variety of Anim");
                WriteLiteral(@"ations ('linear', easeInQuad', easeInElastic', 30 different animations)
                                    },
                                    legend: {
                                        display: true,
                                        position: 'top'
                                    },
                                    layout: {
                                        padding: {
                                            left: 30,
                                            right: 30,
                                            top: 50,
                                            bottom: 10
                                        }
                                    },
                                }
                            });



                        },             //Code runs if the url returns good data
                        error: function (jqXhr, textStatus, errorThrown) {              //2nd part of getJSON method: Chart with predetermined Data and O");
                WriteLiteral(@"ptions is created.
                            var ctx = $('#myChart');
                            var myChart = new Chart(ctx, {
                                type: ""bar"",
                                data: {
                                    labels: [""DATA""],
                                    datasets: [{
                                        label: 'Percentage of Data found',
                                        data: [100],
                                        backgroundColor: ['rgba(255, 00, 00, 0.5)'],
                                        borderColor: ['rgba(255, 99, 132, 1)'],
                                        borderWidth: 1
                                    }]
                                },
                                options: {
                                    scales: {
                                        xAxes: [{
                                            barPercentage: .5,
                                            categoryPercentage:");
                WriteLiteral(@" 0.5
                                        }],
                                        yAxes: [{
                                            ticks: {
                                                beginAtZero: true
                                            }
                                        }]
                                    },
                                    animation: {
                                        duration: 1000,
                                        easing: 'easeInBack'
                                    }
                                },
                                legend: {
                                    display: true
                                }
                            });
                        }             //Code runs if the url returns bad data
                    });
                }
            });
            
        </script> ");
                EndContext();
            }
            );
            BeginContext(8772, 14, true);
            WriteLiteral("\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
